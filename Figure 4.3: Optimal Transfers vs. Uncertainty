import subprocess
import sys

def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# List of packages to import
required_packages = {
    'numpy': 'import numpy as np',
    'pandas': 'import pandas as pd',
    'sympy': 'from sympy import Matrix',
    'scipy': 'from scipy.optimize import minimize; from scipy.special import comb, logsumexp; from scipy.linalg import solve',
    'matplotlib': 'import matplotlib.pyplot as plt',
    'requests': 'import requests',
    'pyreadr': 'import pyreadr',
    'os': 'import os',
    'tempfile': 'import tempfile'
}

# Check and install missing packages, then execute import commands
for package, import_command in required_packages.items():
    try:
        exec(import_command)
    except ImportError:
        install(package.split('.')[0])  # Install the base package if not already installed
        exec(import_command)  # Try to import again after installing

# Confirm the imports (optional)
print("All packages are installed and imported successfully.")


np.random.seed(4862)


# Arrays to store the results
x1 = []
x2 = []
x3 = []
x4 = []
x5 = []
x6 = []
x7 = []
x8 = []
x9 = []
x10 = []
x11 = []
x12 = []
x13 = []
x14 = []
x15 = []
x16 = []
x17 = []
x18 = []
x19 = []
x20 = []
x21 = []
x22 = []
x23 = []
x24 = []
x25 = []
x26 = []
x27 = []
x28 = []
x29 = []
x30 = []

############################################################################################################################################################################

# Generating the constants and storing them 

phi = 0.20 
Psi_values = np.arange(0.05, 0.14, 0.01)                
X = 5.0                    # This is the budget of the interest groups which is used in the computation of the optimal transfers.
q = 0.5                    # This is the value of q which is used in the computation of the pivotal probabilities. (q-rule).      
                        # This is the value of phi* which is used in the computation of the Katz-Bonacich centrality vector.
vmax = 1.0                 # This is the maximum value of the diagonal elements of the matrix V.

# Function to compute phistar for a given Psi
def phistar(Psi):
    return 2 * Psi * phi


# Number of Legislators. Depending on your computer this code will be able to run for a large n. 

n = 429

############################################################################################################################################################################


# Arrays to store the results
x_entries = {i: [] for i in [15, 143, 221, 145, 126, 23, 333, 3, 410, 299, 1, 147, 291, 101, 121, 29, 397, 9, 421, 234, 55, 66, 77, 99, 88, 148, 111, 222, 332, 402]}

def store_matrix_entries(matrix):
    stored_entries = {}
    n = matrix.shape[0]
    for i in range(n):
        for j in range(n):
            identifier = f"g_{i+1}{j+1}"
            stored_entries[identifier] = matrix[i, j]
    return stored_entries

# URL of the raw R data file on GitHub
url = 'https://raw.githubusercontent.com/franklinjg/RAE/29da2338741e37a621442490179455c570402bf4/G_party.rda'

# Make a request to get the content of the .rda file
response = requests.get(url)
if response.status_code == 200:
    # Create a temporary file
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        tmp_file.write(response.content)
        tmp_file_path = tmp_file.name

    # Read the R data file from the temporary file
    result = pyreadr.read_r(tmp_file_path)

    # Optionally delete the temporary file if you're done with it
    os.remove(tmp_file_path)

    # Now you can use 'result' as a normal result object from pyreadr
    print(result.keys())  # For example, to print the keys of the loaded R data

    # Assuming 'G_party' is the key for the data in the .rda file
    G_party = result['G_party']

    # Extract the 429x429 block from the DataFrame and convert it to a numpy matrix
    Gn = G_party.iloc[0:429, 0:429].values

    # Transpose the numpy matrix G
    G_transpose = Gn.T

    # Storing matrix entries in a dictionary from the extracted block
    entries_dict = store_matrix_entries(Gn)
else:
    print("Failed to fetch the file: Status code", response.status_code)

############################################################################################################################################################################

# Function to generate an n x n diagonal matrix V and save the diagonal elements as v1, v2, ..., vn
def generate_and_save_diagonal_matrix(n):
    # Define the possible values for the diagonal elements, ensuring diversity in the matrix
    possible_values_diagonal = [-1, 1, 0.5, -0.5]
    V = np.zeros((n, n))  # Initialise a zero matrix of size n x n

    # Populate the diagonal with randomly chosen values from the specified range
    for i in range(n):
        V[i, i] = np.random.choice(possible_values_diagonal)

    # Construct the filename dynamically based on the matrix size
    filename = f'V{n}.npy'
    np.save(filename, V)  # Save the matrix to a NumPy binary file with the generated filename

    # Extract and store the diagonal elements for easy access
    v_elements = np.diag(V)
    v_dict = {f'v{i+1}': v_elements[i] for i in range(n)}

    # Return the matrix, filename, dictionary of diagonal elements, and the array of diagonal values
    return V, filename, v_dict, v_elements

# Generate the matrix and get the diagonal values
V, filename, v_dict, v_values = generate_and_save_diagonal_matrix(n)  # Use this line to execute the function and retrieve values



# Iterate over each Psi value to compute matrices and check invertibility
for Psi in Psi_values:
    # Step 1: Compute the matrix to invert using a fixed phi and current Psi
    I = np.eye(n)  # Identity matrix of size nxn
    phistar_value = phistar(Psi)  # Compute phistar for the current Psi
    matrix_to_invert = I - phistar_value * Gn

    # Step 2: Check if the matrix is invertible (determinant is not zero)
    is_invertible = np.linalg.det(matrix_to_invert) != 0

    # Step 3: If invertible, compute the inverse and the Katz-Bonacich vector
    if is_invertible:
        inverse_matrix = np.linalg.inv(matrix_to_invert)
        # Step 4: Multiply the inverse by a vector of ones
        katz_bonacich_vector = inverse_matrix.dot(np.ones(n))
        # Step 5: Check if all elements of the resulting vector are positive
        all_positive = np.all(katz_bonacich_vector > 0)
    else:
        all_positive = False  # If the matrix is not invertible, the assumption does not hold

    # Result
    assumption_2_holds = is_invertible and all_positive
    print(f"Psi: {Psi}, Does Assumption 2 hold?: {assumption_2_holds}")


############################################################################################################################################################################

def check_inequality(Psi, vmax, phi, X):
    value_inside = vmax + phi + np.log(2*X)
    result = Psi * value_inside
    print(f"For Psi = {Psi}, computed result: {result}")  
    return result < 0.5

# Loop over each Psi and check if the inequality holds
for Psi in Psi_values:
    inequality_holds = check_inequality(Psi, vmax, phi, X)
    print(f"Does the inequality hold strictly for Psi = {Psi}? : {inequality_holds}")

############################################################################################################################################################################

# Function to calculate pivotal probabilities based on an input vector x
def calculate_pivotal_probabilities(x):
    # Determine the midpoint of the list for dividing the probabilities
    half_n = (len(x) - 1) // 2
    pivotal_probs = np.zeros(len(x))  # Initialise an array to store pivotal probabilities
    epsilon = 1e-10  # Small value to prevent division by zero or log of zero
    
    # Precompute logarithms of combinations for efficiency
    log_comb = np.array([np.log(comb(len(x) - 1, j)) for j in range(half_n)])
    
    # Calculate pivotal probabilities for each element in x
    for i in range(len(x)):
        # Create a list of all other values except the current one
        others = np.concatenate((x[:i], x[i+1:]))
        # Ensure all values are within a valid range for logarithmic functions
        others = np.clip(others, epsilon, 1 - epsilon)
        
        # If not the last element, use the first half for positive probabilities and the second for negative
        if i != len(x) - 1:
            log_probs = log_comb + np.log(others[:half_n]) + np.log(1 - others[half_n:])
        else:
            log_probs = log_comb + np.log(others[:half_n]) + np.log(1 - others[half_n:])
        
        # Compute the exponential of the log-sum-exp to avoid underflow or overflow
        pivotal_probs[i] = np.exp(logsumexp(log_probs))

    # Normalise by the total number of combinations
    return pivotal_probs / (2**(len(x) - 1))



# Function to solve the system for each Psi
def solve_system(v, phi, Psi_values, Gn, pivotal_prob_func, tolerance=1e-6, max_iterations=1000):
    n = len(v)
    results = {}
    
    for Psi in Psi_values:
        x = np.full(n, 0.5)  # Initial guess 
        for iteration in range(max_iterations):
            pivotal_probs = pivotal_prob_func(x)
            x_new = np.empty(n)
            for i in range(n):
                sum_gx = sum(Gn[i, j] * np.clip(2 * x[j] - 1, 1e-10, 1-1e-10) for j in range(n))
                x_new[i] = np.clip(0.5 + Psi * (v[i] * pivotal_probs[i] + Psi * phi * sum_gx), 1e-10, 1-1e-10)

            if np.allclose(x, x_new, atol=tolerance):
                results[Psi] = x_new
                break
            x = x_new
        else:
            print(f"Did not converge for Psi: {Psi}")
            results[Psi] = None

    return results

# Function to compute the Jacobian matrix of a function with respect to its input vector x
def compute_jacobian(x, pivotal_prob_func, h=1e-5):
    n = len(x)  # Determine the size of the input vector
    jacobian = np.zeros((n, n))  # Initialise a matrix of zeros for the Jacobian
    
    # Iterate over each element in the vector to compute partial derivatives
    for j in range(n):
        x1 = x.copy()  # Copy the original vector to perturb it positively
        x2 = x.copy()  # Copy the original vector to perturb it negatively
        x1[j] -= h / 2  # Apply a small negative perturbation
        x2[j] += h / 2  # Apply a small positive perturbation
        
        # Evaluate the function at the perturbed points
        f1 = pivotal_prob_func(x1)  # Function value after negative perturbation
        f2 = pivotal_prob_func(x2)  # Function value after positive perturbation
        
        # Compute the derivative for this dimension
        jacobian[:, j] = (f2 - f1) / h  # Use central difference method for higher accuracy

    return jacobian


# Run the model for each Psi and compute Jacobians
for Psi in Psi_values:
    results = solve_system(v_values, phi, Psi_values, Gn, calculate_pivotal_probabilities)
    if results[Psi] is not None:
        jacobian_matrix = compute_jacobian(results[Psi], calculate_pivotal_probabilities)
        transposed_matrixJ = jacobian_matrix.T  # Calculate the transpose of the Jacobian
        

############################################################################################################################################################################

I = np.eye(n)  # Identity matrix of size n x n
ones_vector = np.ones((n, 1))  # Vector of ones of size n x 1



# Loop over each Psi value
for Psi in Psi_values:
    # Calculate the value from the phistar function
    phistar_value = phistar(Psi)  # Assuming phistar now only takes Psi, since phi is fixed
    
    # Calculate the matrix inside the brackets more efficiently
    matrix_inside_brackets = I - (phistar_value * G_transpose + Psi * transposed_matrixJ @ V)

    # Solve the linear system instead of inverting the matrix directly for numerical stability
    b_M = solve(matrix_inside_brackets, ones_vector)  # Solve the linear system

    print(f"Psi: {Psi:.2f}, The Katz-Bonacich centrality vector b_M is:")
    print(b_M)
    b_M_array = b_M.flatten()  # Flatten the matrix to a 1D array if needed for further processing
    print("Matrix as array:")
    print(b_M_array)




# Assume phi, X, V, Gn, n, and Psi_values are already defined above
# Also assume that the necessary variables for plotting like x_entries are defined

# Define the objective function to be maximized (negative because minimize() finds the minimum)
def objective_function(s, b_M):
    return -np.sum(b_M * np.log(s))

# Initialize a dictionary to store the optimal transfers for each Psi for plotting
optimal_transfers_for_plotting = {i: [] for i in range(n)}  # This assumes you want to plot all n entries

# Loop over each Psi value to calculate b_M and solve the maximization problem
for Psi in Psi_values:
    phistar_value = phistar(Psi)  # Compute phistar for the current Psi
    matrix_inside_brackets = I - (phistar_value * G_transpose + Psi * transposed_matrixJ @ V)

    # Check if the matrix is invertible (determinant is not zero)
    if np.linalg.det(matrix_inside_brackets) != 0:
        # Solve the linear system instead of inverting the matrix directly for numerical stability
        b_M = solve(matrix_inside_brackets, np.ones(n))  # Solve the linear system
        b_M_array = b_M.flatten()  # Flatten the matrix to a 1D array

        # Now that we have b_M_array for this Psi, we can run the optimization
        constraints = {'type': 'eq', 'fun': lambda s: np.sum(s) - X}
        bounds = [(1e-5, None)] * len(b_M_array)
        initial_s = np.full(len(b_M_array), X / len(b_M_array))

        # Run the optimization algorithm
        result = minimize(objective_function, initial_s, args=(b_M_array), bounds=bounds, constraints=constraints)

        if result.success:
            # Store the optimal vector of transfers for this Psi for plotting
            s_optimal = result.x
            for i in range(n):
                optimal_transfers_for_plotting[i].append(s_optimal[i])
        else:
            print(f"Optimization failed for Psi = {Psi}")
    else:
        print(f"Matrix not invertible for Psi = {Psi}")

plt.figure(figsize=(10, 5))
for idx in x_entries.keys():
    plt.plot(Psi_values, [optimal_transfers_for_plotting[idx][i] for i, Psi in enumerate(Psi_values)], label=f'Entry {idx + 1}')
plt.xlabel(r'$\Psi$')
plt.ylabel('Optimal Transfer')
plt.title('Optimal Transfers vs. Uncertainty')
plt.show()
