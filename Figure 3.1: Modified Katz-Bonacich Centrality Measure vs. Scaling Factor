import subprocess
import sys

def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# List of packages to import
required_packages = {
    'numpy': 'import numpy as np',
    'pandas': 'import pandas as pd',
    'sympy': 'from sympy import Matrix',
    'scipy': 'from scipy.optimize import minimize; from scipy.special import comb, logsumexp; from scipy.linalg import solve',
    'matplotlib': 'import matplotlib.pyplot as plt',
    'requests': 'import requests',
    'pyreadr': 'import pyreadr',
    'os': 'import os',
    'tempfile': 'import tempfile'
}

# Check and install missing packages, then execute import commands
for package, import_command in required_packages.items():
    try:
        exec(import_command)
    except ImportError:
        install(package.split('.')[0])  # Install the base package if not already installed
        exec(import_command)  # Try to import again after installing

# Confirm the imports (optional)
print("All packages are installed and imported successfully.")


np.random.seed(4862)


# Arrays to store the results
x1 = []
x2 = []
x3 = []
x4 = []
x5 = []
x6 = []
x7 = []
x8 = []
x9 = []
x10 = []
x11 = []
x12 = []
x13 = []
x14 = []
x15 = []
x16 = []
x17 = []
x18 = []
x19 = []
x20 = []
x21 = []
x22 = []
x23 = []
x24 = []
x25 = []
x26 = []
x27 = []
x28 = []
x29 = []
x30 = []



############################################################################################################################################################################

# Generating the constants and storing them 

phi_values = np.linspace(0.1, 0.98, 40) 
Psi = 0.10               
X = 5.0                    # This is the budget of the interest groups which is used in the computation of the optimal transfers.
q = 0.5                    # This is the value of q which is used in the computation of the pivotal probabilities. (q-rule).      
 # This is the value of phi* which is used in the computation of the Katz-Bonacich centrality vector.
vmax = 1.0                 # This is the maximum value of the diagonal elements of the matrix V.

# Function to compute phistar for a given Psi
def phistar(phi):
    return 2 * Psi * phi


# Number of Legislators. Depending on your computer this code will be able to run for a large n. 

n = 429

############################################################################################################################################################################


def store_matrix_entries(matrix):
    # Initialise an empty dictionary to hold matrix entries
    stored_entries = {}
    
    # Get the number of rows (or columns, since it's square) in the matrix
    n = matrix.shape[0]
    
    # Iterate through each element of the matrix
    for i in range(n):
        for j in range(n):
            # Create a unique identifier for each matrix element
            identifier = f"g_{i+1}{j+1}"
            
            # Store the element in the dictionary with its identifier
            stored_entries[identifier] = matrix[i, j]
    
    # Return the dictionary containing all matrix entries
    return stored_entries


# URL of the raw R data file on GitHub
url = 'https://raw.githubusercontent.com/franklinjg/RAE/29da2338741e37a621442490179455c570402bf4/G_party.rda'

# Make a request to get the content of the .rda file
response = requests.get(url)
if response.status_code == 200:
    # Create a temporary file
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        tmp_file.write(response.content)
        tmp_file_path = tmp_file.name

    # Read the R data file from the temporary file
    result = pyreadr.read_r(tmp_file_path)

    # Optionally delete the temporary file if you're done with it
    os.remove(tmp_file_path)

    # Now you can use 'result' as a normal result object from pyreadr
    print(result.keys())  # For example, to print the keys of the loaded R data

    # Assuming 'G_party' is the key for the data in the .rda file
    G_party = result['G_party']

    # Extract the 429x429 block from the DataFrame and convert it to a numpy matrix
    Gn = G_party.iloc[0:429, 0:429].values

    # Transpose the numpy matrix G
    G_transpose = Gn.T

    # Storing matrix entries in a dictionary from the extracted block
    entries_dict = store_matrix_entries(Gn)
else:
    print("Failed to fetch the file: Status code", response.status_code)

############################################################################################################################################################################

def generate_and_save_diagonal_matrix(n):
    # Define possible values for the diagonal elements
    possible_values_diagonal = [-1, 1, 0.5, -0.5]

    # Initialise a zero matrix of size n x n
    V = np.zeros((n, n))

    # Assign random values from specified options to the diagonal
    for i in range(n):
        V[i, i] = np.random.choice(possible_values_diagonal)

    # Construct the filename using the matrix size
    filename = f'V{n}.npy'
    
    # Save the matrix to a .npy file
    np.save(filename, V)
    
    # Extract diagonal elements from the matrix
    v_elements = np.diag(V)
    
    # Store diagonal elements in a dictionary with keys 'v1', 'v2', ..., 'vn'
    v_dict = {f'v{i+1}': v_elements[i] for i in range(n)}

    # Return the matrix, its filename, and the dictionary of diagonal elements
    return V, filename, v_dict, v_elements


# Generate the matrix and get the diagonal values
V, filename, v_dict, v_values = generate_and_save_diagonal_matrix(n)  # Now v_values is defined


# Iterate over each phii value to compute matrices and check invertibility
for phi in phi_values:
    # Step 1: Compute the matrix to invert using a fixed phi and current phi
    I = np.eye(n)  # Identity matrix of size nxn
    phistar_value = phistar(phi)  # Compute phistar for the current Psi
    matrix_to_invert = I - phistar_value * Gn

    # Step 2: Check if the matrix is invertible (determinant is not zero)
    is_invertible = np.linalg.det(matrix_to_invert) != 0

    # Step 3: If invertible, compute the inverse and the Katz-Bonacich vector
    if is_invertible:
        inverse_matrix = np.linalg.inv(matrix_to_invert)
        # Step 4: Multiply the inverse by a vector of ones
        katz_bonacich_vector = inverse_matrix.dot(np.ones(n))
        # Step 5: Check if all elements of the resulting vector are positive
        all_positive = np.all(katz_bonacich_vector > 0)
    else:
        all_positive = False  # If the matrix is not invertible, the assumption does not hold

    # Result
    assumption_2_holds = is_invertible and all_positive
    print(f"phi: {phi}, Does Assumption 2 hold?: {assumption_2_holds}")


############################################################################################################################################################################

def check_inequality(Psi, vmax, phi, X):
    value_inside = vmax + phi + np.log(2*X)
    result = Psi * value_inside
    print(f"For phi = {phi}, computed result: {result}")  
    return result < 0.5

# Loop over each phii and check if the inequality holds
for phi in phi_values:
    inequality_holds = check_inequality(Psi, vmax, phi, X)
    print(f"Does the inequality hold strictly for phi = {phi}? : {inequality_holds}")

############################################################################################################################################################################

def calculate_pivotal_probabilities(x):
    # Calculate the midpoint of the list x to split probabilities
    half_n = (len(x) - 1) // 2

    # Initialise an array for storing pivotal probabilities
    pivotal_probs = np.zeros(len(x))

    # Compute logarithm of combinatorial numbers for use in probabilities
    epsilon = 1e-10  # Small value to prevent log(0)
    log_comb = np.array([np.log(comb(len(x) - 1, j)) for j in range(half_n)])
    
    # Calculate pivotal probabilities for each element in x
    for i in range(len(x)):
        # Create an array excluding the current element
        others = np.concatenate((x[:i], x[i+1:]))
        # Ensure values are within allowable range for log operations
        others = np.clip(others, epsilon, 1 - epsilon)

        # Compute log probabilities using combinatorial and other elements
        if i != len(x) - 1:
            log_probs = log_comb + np.log(others[:half_n]) + np.log(1 - others[half_n:])
        else:
            log_probs = log_comb + np.log(others[:half_n]) + np.log(1 - others[half_n:])

        # Calculate the actual probability using the log-sum-exp trick for numerical stability
        pivotal_probs[i] = np.exp(logsumexp(log_probs))

    # Normalise the probabilities by the total number of combinations
    return pivotal_probs / (2 ** (len(x) - 1))


# Function to solve the system for each phi
def solve_system(v, phi_values, Psi, Gn, pivotal_prob_func, tolerance=1e-6, max_iterations=1000):
    n = len(v)
    results = {}
    
    for phi in phi_values:
        x = np.full(n, 0.5)  # Initial guess 
        for iteration in range(max_iterations):
            pivotal_probs = pivotal_prob_func(x)
            x_new = np.empty(n)
            for i in range(n):
                sum_gx = sum(Gn[i, j] * np.clip(2 * x[j] - 1, 1e-10, 1-1e-10) for j in range(n))
                x_new[i] = np.clip(0.5 + Psi * (v[i] * pivotal_probs[i] + Psi * phi * sum_gx), 1e-10, 1-1e-10)

            if np.allclose(x, x_new, atol=tolerance):
                results[phi] = x_new
                break
            x = x_new
        else:
            print(f"Did not converge for phi: {phi}")
            results[phi] = None

    return results

def compute_jacobian(x, pivotal_prob_func, h=1e-5):
    # Determine the number of variables (dimensions) from input array x
    n = len(x)
    
    # Initialise the Jacobian matrix with zeros, shape (n, n)
    jacobian = np.zeros((n, n))
    
    # Calculate the Jacobian matrix by approximating derivatives
    for j in range(n):
        # Copy the current state of x to create perturbed versions
        x1 = x.copy()
        x2 = x.copy()
        
        # Perturb x1 and x2 by a small value h around the j-th dimension
        x1[j] -= h / 2
        x2[j] += h / 2
        
        # Evaluate the function at the perturbed points
        f1 = pivotal_prob_func(x1)
        f2 = pivotal_prob_func(x2)
        
        # Compute the derivative (finite difference) and assign to the Jacobian matrix
        jacobian[:, j] = (f2 - f1) / h

    # Return the computed Jacobian matrix
    return jacobian


# Run the model for each phi and compute Jacobians
for phi in phi_values:
    results = solve_system(v_values, phi_values, Psi, Gn, calculate_pivotal_probabilities)
    if results[phi] is not None:
        jacobian_matrix = compute_jacobian(results[phi], calculate_pivotal_probabilities)
        transposed_matrixJ = jacobian_matrix.T  # Calculate the transpose of the Jacobian
        

############################################################################################################################################################################

I = np.eye(n)  # Identity matrix of size n x n
ones_vector = np.ones((n, 1))  # Vector of ones of size n x 1


# Loop over each phi value
for phi in phi_values:
    # Calculate the value from the phistar function
    phistar_value = phistar(phi)  
    
    # Calculate the matrix inside the brackets more efficiently
    matrix_inside_brackets = I - (phistar_value * G_transpose + (Psi * transposed_matrixJ) @ V)

# Solve the linear system Ax = b for x, where A is matrix_inside_brackets and b is ones_vector.
# This method is preferred over directly computing the inverse of A (A^-1) and then multiplying by b (A^-1 * b)
# because it is more numerically stable and computationally efficient.
# Directly inverting a matrix can lead to large numerical errors especially if the matrix is near singular or poorly conditioned.
# The 'solve' function uses optimized algorithms (like LU decomposition) that are more robust to these issues, providing more accurate results.

    # Solve the linear system instead of inverting the matrix directly for numerical stability
    b_M = solve(matrix_inside_brackets, ones_vector)  # Solve the linear system

    print(f"phi: {phi:.2f}, The Katz-Bonacich centrality vector b_M is:")
    print(b_M)
    b_M_array = b_M.flatten()  # Flatten the matrix to a 1D array if needed for further processing
    print("Matrix as array:")
    print(b_M_array)



    x1.append(b_M_array[15])
    x2.append(b_M_array[143])
    x3.append(b_M_array[221])
    x4.append(b_M_array[145])
    x5.append(b_M_array[126])
    x6.append(b_M_array[23])
    x7.append(b_M_array[333])
    x8.append(b_M_array[3])
    x9.append(b_M_array[410])
    x10.append(b_M_array[291])
    x11.append(b_M_array[1])
    x12.append(b_M_array[147])
    x13.append(b_M_array[299])
    x14.append(b_M_array[101])
    x15.append(b_M_array[121])
    x16.append(b_M_array[29])
    x17.append(b_M_array[397])
    x18.append(b_M_array[9])
    x19.append(b_M_array[421])
    x20.append(b_M_array[234])
    x21.append(b_M_array[55])
    x22.append(b_M_array[66])
    x23.append(b_M_array[77])
    x24.append(b_M_array[99])
    x25.append(b_M_array[88])
    x26.append(b_M_array[148])
    x27.append(b_M_array[111])
    x28.append(b_M_array[222])
    x29.append(b_M_array[332])
    x30.append(b_M_array[402])
  




   


plt.figure(figsize=(10, 5))
plt.plot(phi_values, x1, label='Legislator 1')
plt.plot(phi_values, x2, label='Legislator 2')
plt.plot(phi_values, x3, label='Legislator 3')
plt.plot(phi_values, x4, label='Legislator 4')
plt.plot(phi_values, x5, label='Legislator 5')
plt.plot(phi_values, x6, label='Legislator 6')
plt.plot(phi_values, x7, label='Legislator 7')
plt.plot(phi_values, x8, label='Legislator 8')
plt.plot(phi_values, x9, label='Legislator 9')
plt.plot(phi_values, x10, label='Legislator 10')
plt.plot(phi_values, x11, label='Legislator 11')
plt.plot(phi_values, x12, label='Legislator 12')
plt.plot(phi_values, x13, label='Legislator 13')
plt.plot(phi_values, x14, label='Legislator 14')
plt.plot(phi_values, x15, label='Legislator 15')
plt.plot(phi_values, x16, label='Legislator 16')
plt.plot(phi_values, x17, label='Legislator 17')
plt.plot(phi_values, x18, label='Legislator 18')
plt.plot(phi_values, x19, label='Legislator 19')
plt.plot(phi_values, x20, label='Legislator 20')
plt.plot(phi_values, x21, label='Legislator 21')
plt.plot(phi_values, x22, label='Legislator 22')
plt.plot(phi_values, x23, label='Legislator 23')
plt.plot(phi_values, x24, label='Legislator 24')
plt.plot(phi_values, x25, label='Legislator 25')
plt.plot(phi_values, x26, label='Legislator 26')
plt.plot(phi_values, x27, label='Legislator 27')
plt.plot(phi_values, x28, label='Legislator 28')
plt.plot(phi_values, x29, label='Legislator 29')
plt.plot(phi_values, x30, label='Legislator 30')
plt.xlabel(r'$\phi$')  
plt.ylabel('Modified Katz-Bonacich Centrality Measure')
plt.title('Modified Katz-Bonacich Centrality Measure vs. Scaling Factor')
plt.grid(True)
plt.show()
